---
import FilenameInput from "../components/FilenameInput.astro";
import Footer from "../components/Footer.astro";
import FormatTypeSelect from "../components/FormatTypeSelect.astro";
import PresetTypeSelect from "../components/PresetTypeSelect.astro";
import Toggle from "../components/Toggle.astro";
import VideoHolder from "../components/VideoHolder.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout title="Screen Recorder">
  <main class="m-auto max-w-[800px] w-full flex flex-col gap-4">
    <h1 class="text-3xl font-semibold text-center mb-0 mt-8">
      Screen Recorder
    </h1>
    <hr
      class="w-48 h-1 mx-auto my-4 bg-gray-100 border-0 rounded md:my-10 dark:bg-gray-700"
    />

    <PresetTypeSelect>Preset</PresetTypeSelect>

    <div class="flex gap-1">
      <FilenameInput clase="w-full">Filename</FilenameInput>
      <FormatTypeSelect>Format</FormatTypeSelect>
    </div>

    <Toggle value="autoDownload">Download after finishing recording</Toggle>

    <div class="flex gap-2">
      <button
        data-stop-recording
        disabled
        class="p-2 w-full bg-blue-300 transition-all hover:bg-blue-600 font-semibold rounded disabled:bg-blue-800 disabled:cursor-not-allowed"
        >Stop Recording</button
      >

      <button
        data-start-recording
        class="p-2 w-full bg-red-400 transition-all hover:bg-red-600 font-semibold rounded disabled:bg-red-800 disabled:cursor-not-allowed"
      >
        Start Recording</button
      >
    </div>

    <a
      id="downloadLink"
      class="bg-emerald-500 transition-all hover:bg-emerald-600 w-full p-2 font-semibold text-center rounded hidden"
      >Download video</a
    >

    <VideoHolder />
  </main>
  <Footer />
</Layout>

<script>
  const startRecording = document.querySelector(
    "[data-start-recording]"
  ) as HTMLButtonElement;
  const stopRecording = document.querySelector(
    "[data-stop-recording]"
  ) as HTMLButtonElement;

  let mediaRecorder: MediaRecorder;
  let media: MediaStream;

  startRecording.addEventListener("click", handleStartRecording);
  stopRecording.addEventListener("click", handleStopRecording);

  async function handleStartRecording(e) {
    console.log("start recording");
    startRecording.disabled = true;
    stopRecording.disabled = false;

    media = await navigator.mediaDevices.getDisplayMedia({
      video: { frameRate: { ideal: 60, max: 60 } },
      audio: {
        echoCancellation: false,
        noiseSuppression: false,
        autoGainControl: false,
      },
    });

    const recordingType = document.querySelector(
      "[data-video-group] option:checked"
    ) as HTMLOptionElement;

    mediaRecorder = new MediaRecorder(media, {
      mimeType: recordingType.dataset.mimeType,
    });

    mediaRecorder.start();

    mediaRecorder.addEventListener("dataavailable", (e) => {
      const filename = document.querySelector("#filename") as HTMLInputElement;
      if (!filename.value) filename.value = "recording";

      const link = document.createElement("a");
      link.href = URL.createObjectURL(e.data);
      link.download = `${filename.value}.${recordingType.value}`;

      const autoDownload = document.querySelector(
        "#autoDownload"
      ) as HTMLInputElement;
      if (autoDownload.checked) {
        link.click();
      }

      const downloadLink = document.querySelector(
        "#downloadLink"
      ) as HTMLAnchorElement;
      downloadLink.classList.remove("hidden");
      downloadLink.href = link.href;
      downloadLink.download = link.download;

      if (recordingType.value == "webm" || recordingType.value == "mp4") {
        const videoHolder = document.querySelector(
          "#videoHolder"
        ) as HTMLVideoElement;
        videoHolder.src = link.href;
        videoHolder.controls = true;
        videoHolder.classList.remove("hidden");
      }
    });

    const [video] = media.getVideoTracks();
    video.addEventListener("ended", () => {
      mediaRecorder.stop();
    });
  }

  async function handleStopRecording(e) {
    console.log("stop recording");
    startRecording.disabled = false;
    stopRecording.disabled = true;

    if (mediaRecorder && mediaRecorder.state === "recording") {
      mediaRecorder.stop();
    }

    media.getTracks().forEach((track) => track.stop());
  }
</script>
