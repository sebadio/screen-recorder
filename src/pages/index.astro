---
import FilenameInput from "../components/FilenameInput.astro";
import Footer from "../components/Footer.astro";
import FormatTypeSelect from "../components/FormatTypeSelect.astro";
import PresetTypeSelect from "../components/PresetTypeSelect.astro";
import Toggle from "../components/Toggle.astro";
import VideoHolder from "../components/VideoHolder.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout title="Screen Recorder">
  <main class="m-auto max-w-[80vw] lg:max-w-[800px] w-full flex flex-col gap-4">
    <h1 class="text-3xl font-semibold text-center mb-0 mt-8">
      Screen Recorder
    </h1>
    <hr
      class="w-48 h-1 mx-auto my-4 bg-gray-100 border-0 rounded md:my-10 dark:bg-gray-700"
    />

    <PresetTypeSelect>Preset</PresetTypeSelect>

    <div class="flex gap-1">
      <FilenameInput clase="w-full">Filename</FilenameInput>
      <FormatTypeSelect>Format</FormatTypeSelect>
    </div>

    <div class="flex gap-4">
      <Toggle value="autoDownload">Download after recording finishes</Toggle>
      <Toggle value="advanced">Advanced options</Toggle>
    </div>

    <div class="hidden transition-all" id="advancedOptions">
      <Toggle value="audio">Record audio</Toggle>
    </div>

    <!-- Start and stop video -->
    <div class="flex gap-2 text-white">
      <button
        data-stop-recording
        disabled
        class="p-2 w-full bg-blue-300 transition-all hover:bg-blue-600 font-semibold rounded disabled:bg-blue-800 disabled:cursor-not-allowed"
        >Stop Recording</button
      >

      <button
        data-start-recording
        class="p-2 w-full bg-red-400 transition-all hover:bg-red-600 font-semibold rounded disabled:bg-red-800 disabled:cursor-not-allowed"
      >
        Start Recording</button
      >
    </div>

    <a
      id="downloadLink"
      class="bg-emerald-500 transition-all hover:bg-emerald-600 w-full p-2 font-semibold text-center rounded hidden"
      >Download video</a
    >

    <VideoHolder />
  </main>
  <Footer />
</Layout>

<script>
  import { handleGenerateBlob } from "../functions/handleGenerateBlob.ts";
  import { toggleAdvancedOptions } from "../functions/toggleAdvancedOptions.ts";

  const startRecording = document.querySelector(
    "[data-start-recording]"
  ) as HTMLButtonElement;
  const stopRecording = document.querySelector(
    "[data-stop-recording]"
  ) as HTMLButtonElement;

  let mediaRecorder: MediaRecorder;
  let media: MediaStream;

  startRecording.addEventListener("click", handleStartRecording);
  stopRecording.addEventListener("click", handleStopRecording);
  document
    .querySelector("#advanced")
    .addEventListener("change", toggleAdvancedOptions);

  function changeButtonState() {
    startRecording.disabled = !startRecording.disabled;
    stopRecording.disabled = !stopRecording.disabled;
  }

  async function handleStartRecording(e) {
    console.log("start recording");

    //TODO - add audio recording properly
    media = await navigator.mediaDevices.getDisplayMedia({
      video: { frameRate: { ideal: 60, max: 60 } },
      audio: {
        echoCancellation: false,
        noiseSuppression: false,
        autoGainControl: false,
      },
    });

    changeButtonState();

    const recordingType = document.querySelector(
      "[data-video-group] option:checked"
    ) as HTMLOptionElement;

    mediaRecorder = new MediaRecorder(media, {
      mimeType: recordingType.dataset.mimeType,
    });

    mediaRecorder.start();

    mediaRecorder.addEventListener("dataavailable", handleGenerateBlob);
    mediaRecorder.addEventListener("stop", changeButtonState);

    // //FIXME - is this necesary? see handleStopRecording
    // const [video] = media.getVideoTracks();
    // video.addEventListener("ended", () => {
    //   mediaRecorder.stop();
    // });
  }

  async function handleStopRecording() {
    console.log("stop recording");

    if (mediaRecorder && mediaRecorder.state === "recording") {
      mediaRecorder.stop();
    }

    media.getTracks().forEach((track) => track.stop());
  }
</script>
